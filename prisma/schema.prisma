// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

// Core exam structure
model Exam {
  id                 String   @id @default(uuid())
  code               String
  nameShort          String
  nameMedium         String
  nameFull           String
  examType           String
  difficulty         Int
  programmingLanguage String?
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  topics             Topic[]
  sessions           ExamSession[]

  @@index([examType, isActive])
}

model Topic {
  id          String   @id @default(uuid())
  examId      String
  topicId     String   // Reference to the topic in JSON files
  name        String
  description String
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  exam        Exam     @relation(fields: [examId], references: [id])
  subTopics   SubTopic[]
  questions   Question[]
  progress    TopicProgress[]

  @@index([examId])
}

model SubTopic {
  id          String   @id @default(uuid())
  topicId     String
  name        String
  description String
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  topic       Topic    @relation(fields: [topicId], references: [id])

  @@index([topicId])
}

// User and session management
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sessions  ExamSession[]
  responses QuestionResponse[]
}

model ExamSession {
  id          String    @id @default(uuid())
  examId      String
  userId      String
  status      String    // 'not_started', 'in_progress', 'completed'
  score       Float?
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  exam        Exam      @relation(fields: [examId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  progress    TopicProgress[]
  responses   QuestionResponse[]

  @@index([examId])
  @@index([userId])
}

// Questions and responses
model Question {
  id          String   @id @default(uuid())
  topicId     String
  content     String
  type        String   // 'multiple_choice', 'open', 'code'
  difficulty  Int
  metadata    String   // JSON string for flexible metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  topic       Topic    @relation(fields: [topicId], references: [id])
  responses   QuestionResponse[]

  @@index([topicId, type, difficulty])
}

model QuestionResponse {
  id          String   @id @default(uuid())
  sessionId   String
  questionId  String
  userId      String
  answer      String
  isCorrect   Boolean
  timeTaken   Int      // in seconds
  createdAt   DateTime @default(now())

  // Relations
  session     ExamSession @relation(fields: [sessionId], references: [id])
  question    Question    @relation(fields: [questionId], references: [id])
  user        User        @relation(fields: [userId], references: [id])

  @@index([sessionId])
  @@index([questionId])
  @@index([userId])
}

model TopicProgress {
  id              String   @id @default(uuid())
  sessionId       String
  topicId         String
  correctAnswers  Int
  totalQuestions  Int
  timeSpent       Int      // in seconds
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  session         ExamSession @relation(fields: [sessionId], references: [id])
  topic           Topic       @relation(fields: [topicId], references: [id])

  @@index([sessionId, topicId])
} 